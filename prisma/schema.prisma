generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  role        Role      @default(STUDENT)
  displayName String?
  orgId       String?
  aiAllowed   Boolean   @default(false)
  settings    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userFacts UserFact[]
  sessions  Session[]
  badges    Badge[]
}

model Fact {
  id           String @id @default(cuid())
  a            Int
  b            Int
  op           String
  commutesWith String?

  userFacts UserFact[]
  attempts  Attempt[]
}

model UserFact {
  id            String   @id @default(cuid())
  userId        String
  factId        String
  masteryLevel  Int      @default(0)
  streak        Int      @default(0)
  easiness      Float    @default(2.5)
  intervalDays  Float    @default(0)
  dueAt         DateTime @default(now())
  lastLatencyMs Int?
  lastAccuracy  Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  fact Fact @relation(fields: [factId], references: [id], onDelete: Cascade)

  @@unique([userId, factId])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  mode      String   @default("PRACTICE")
  startedAt DateTime @default(now())
  endedAt   DateTime?
  accuracy  Float?
  score     Int?

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  attempts Attempt[]
}

model Attempt {
  id        String   @id @default(cuid())
  sessionId String
  factId    String
  correct   Boolean
  latencyMs Int
  hintUsed  Boolean  @default(false)
  createdAt DateTime @default(now())

  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  fact    Fact    @relation(fields: [factId], references: [id], onDelete: Cascade)
}

model Badge {
  id        String   @id @default(cuid())
  userId    String
  type      String
  awardedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  STUDENT
  TEACHER
  PARENT
  ADMIN
}

// Game Submissions for "Make Your Game" feature
model GameSubmission {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Status tracking
  status          String   @default("pending") // pending | building | review | approved | rejected | live
  
  // Creator info
  creatorName     String   @db.VarChar(30)
  creatorEmail    String   @db.VarChar(100)
  
  // Game identity
  gameTitle       String   @db.VarChar(30)
  gameDescription String   @db.VarChar(300)
  gameSlug        String   @unique @db.VarChar(50)
  
  // Design choices (stored as JSON)
  gameType        String   @db.VarChar(20)
  difficulty      Json     // { overall: 1-5, speed: 1-5, lives: number }
  visualStyle     Json     // { colors: string, artStyle: string, background: string }
  controls        Json     // { movement: string, specialAction: string }
  elements        Json     // { collectibles: string[], hazards: string[], features: string[] }
  
  // Generated content
  generatedCode   String?  @db.Text
  heroSvg         String?  @db.Text
  screenshotsSvg  Json?
  
  // Admin review
  reviewNotes     String?  @db.Text
  approvedBy      String?
  approvedAt      DateTime?
  liveUrl         String?
  
  @@index([status])
  @@index([creatorEmail])
  @@index([createdAt])
  @@map("game_submissions")
}
